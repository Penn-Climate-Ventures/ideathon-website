{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar overlayPackage = process.env.GATSBY_HOT_LOADER !== \"fast-refresh\" ? require(\"react-error-overlay\") : require(\"@pmmmwh/react-refresh-webpack-plugin/overlay\");\nvar ErrorOverlay = {\n  showCompileError: process.env.GATSBY_HOT_LOADER !== \"fast-refresh\" ? overlayPackage.reportBuildError : overlayPackage.showCompileError,\n  clearCompileError: process.env.GATSBY_HOT_LOADER !== \"fast-refresh\" ? overlayPackage.dismissBuildError : overlayPackage.clearCompileError\n};\n\nif (process.env.GATSBY_HOT_LOADER !== \"fast-refresh\") {\n  overlayPackage.startReportingRuntimeErrors({\n    onError: function onError() {},\n    filename: \"/commons.js\"\n  });\n  overlayPackage.setEditorHandler(function (errorLocation) {\n    return window.fetch(\"/__open-stack-frame-in-editor?fileName=\" + window.encodeURIComponent(errorLocation.fileName) + \"&lineNumber=\" + window.encodeURIComponent(errorLocation.lineNumber || 1));\n  });\n}\n\nvar errorMap = {};\n\nfunction flat(arr) {\n  var _ref;\n\n  return Array.prototype.flat ? arr.flat() : (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n}\n\nvar handleErrorOverlay = function handleErrorOverlay() {\n  var errors = Object.values(errorMap);\n  var errorStringsToDisplay = [];\n\n  if (errors.length > 0) {\n    errorStringsToDisplay = flat(errors).map(function (error) {\n      if (typeof error === \"string\") {\n        return error;\n      } else if (typeof error === \"object\") {\n        var errorStrBuilder = [error.text];\n\n        if (error.filePath) {\n          errorStrBuilder.push(\"File: \" + error.filePath);\n        }\n\n        return errorStrBuilder.join(\"\\n\\n\");\n      }\n\n      return null;\n    }).filter(Boolean);\n  }\n\n  if (errorStringsToDisplay.length > 0) {\n    ErrorOverlay.showCompileError(errorStringsToDisplay.join(\"\\n\\n\"));\n  } else {\n    ErrorOverlay.clearCompileError();\n  }\n};\n\nexport var clearError = function clearError(errorID) {\n  delete errorMap[errorID];\n  handleErrorOverlay();\n};\nexport var reportError = function reportError(errorID, error) {\n  if (error) {\n    errorMap[errorID] = error;\n  }\n\n  handleErrorOverlay();\n};\nexport { errorMap };","map":{"version":3,"sources":["/Users/aliristang/Desktop/prize-website/.cache/error-overlay-handler.js"],"names":["overlayPackage","process","env","GATSBY_HOT_LOADER","require","ErrorOverlay","showCompileError","reportBuildError","clearCompileError","dismissBuildError","startReportingRuntimeErrors","onError","filename","setEditorHandler","errorLocation","window","fetch","encodeURIComponent","fileName","lineNumber","errorMap","flat","arr","Array","prototype","concat","handleErrorOverlay","errors","Object","values","errorStringsToDisplay","length","map","error","errorStrBuilder","text","filePath","push","join","filter","Boolean","clearError","errorID","reportError"],"mappings":";AAAA,IAAMA,cAAc,GAClBC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,sBACIC,OAAO,uBADX,GAEIA,OAAO,gDAHb;AAKA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,gBAAgB,EACdL,OAAO,CAACC,GAAR,CAAYC,iBAAZ,sBACIH,cAAc,CAACO,gBADnB,GAEIP,cAAc,CAACM,gBAJF;AAKnBE,EAAAA,iBAAiB,EACfP,OAAO,CAACC,GAAR,CAAYC,iBAAZ,sBACIH,cAAc,CAACS,iBADnB,GAEIT,cAAc,CAACQ;AARF,CAArB;;AAWA,IAAIP,OAAO,CAACC,GAAR,CAAYC,iBAAZ,mBAAJ,EAAsD;AAEpDH,EAAAA,cAAc,CAACU,2BAAf,CAA2C;AACzCC,IAAAA,OAAO,EAAE,mBAAM,CAAE,CADwB;AAEzCC,IAAAA,QAAQ;AAFiC,GAA3C;AAIAZ,EAAAA,cAAc,CAACa,gBAAf,CAAgC,UAAAC,aAAa;AAAA,WAC3CC,MAAM,CAACC,KAAP,CACE,4CACED,MAAM,CAACE,kBAAP,CAA0BH,aAAa,CAACI,QAAxC,CADF,oBAGEH,MAAM,CAACE,kBAAP,CAA0BH,aAAa,CAACK,UAAd,IAA4B,CAAtD,CAJJ,CAD2C;AAAA,GAA7C;AAQD;;AAED,IAAMC,QAAQ,GAAG,EAAjB;;AAEA,SAASC,IAAT,CAAcC,GAAd,EAAmB;AAAA;;AACjB,SAAOC,KAAK,CAACC,SAAN,CAAgBH,IAAhB,GAAuBC,GAAG,CAACD,IAAJ,EAAvB,GAAoC,YAAGI,MAAH,gCAAaH,GAAb,EAA3C;AACD;;AAED,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcT,QAAd,CAAf;AACA,MAAIU,qBAAqB,GAAG,EAA5B;;AACA,MAAIH,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;AACrBD,IAAAA,qBAAqB,GAAGT,IAAI,CAACM,MAAD,CAAJ,CACrBK,GADqB,CACjB,UAAAC,KAAK,EAAI;AACZ,UAAI,OAAOA,KAAP,aAAJ,EAA+B;AAC7B,eAAOA,KAAP;AACD,OAFD,MAEO,IAAI,OAAOA,KAAP,aAAJ,EAA+B;AACpC,YAAMC,eAAe,GAAG,CAACD,KAAK,CAACE,IAAP,CAAxB;;AAEA,YAAIF,KAAK,CAACG,QAAV,EAAoB;AAClBF,UAAAA,eAAe,CAACG,IAAhB,YAA8BJ,KAAK,CAACG,QAApC;AACD;;AAED,eAAOF,eAAe,CAACI,IAAhB,QAAP;AACD;;AAED,aAAO,IAAP;AACD,KAfqB,EAgBrBC,MAhBqB,CAgBdC,OAhBc,CAAxB;AAiBD;;AAED,MAAIV,qBAAqB,CAACC,MAAtB,GAA+B,CAAnC,EAAsC;AACpC1B,IAAAA,YAAY,CAACC,gBAAb,CAA8BwB,qBAAqB,CAACQ,IAAtB,QAA9B;AACD,GAFD,MAEO;AACLjC,IAAAA,YAAY,CAACG,iBAAb;AACD;AACF,CA5BD;;AA8BA,OAAO,IAAMiC,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO,EAAI;AACnC,SAAOtB,QAAQ,CAACsB,OAAD,CAAf;AACAhB,EAAAA,kBAAkB;AACnB,CAHM;AAKP,OAAO,IAAMiB,WAAW,GAAG,SAAdA,WAAc,CAACD,OAAD,EAAUT,KAAV,EAAoB;AAC7C,MAAIA,KAAJ,EAAW;AACTb,IAAAA,QAAQ,CAACsB,OAAD,CAAR,GAAoBT,KAApB;AACD;;AACDP,EAAAA,kBAAkB;AACnB,CALM;AAOP,SAASN,QAAT","sourcesContent":["const overlayPackage =\n  process.env.GATSBY_HOT_LOADER !== `fast-refresh`\n    ? require(`react-error-overlay`)\n    : require(`@pmmmwh/react-refresh-webpack-plugin/overlay`)\n\nconst ErrorOverlay = {\n  showCompileError:\n    process.env.GATSBY_HOT_LOADER !== `fast-refresh`\n      ? overlayPackage.reportBuildError\n      : overlayPackage.showCompileError,\n  clearCompileError:\n    process.env.GATSBY_HOT_LOADER !== `fast-refresh`\n      ? overlayPackage.dismissBuildError\n      : overlayPackage.clearCompileError,\n}\n\nif (process.env.GATSBY_HOT_LOADER !== `fast-refresh`) {\n  // Report runtime errors\n  overlayPackage.startReportingRuntimeErrors({\n    onError: () => {},\n    filename: `/commons.js`,\n  })\n  overlayPackage.setEditorHandler(errorLocation =>\n    window.fetch(\n      `/__open-stack-frame-in-editor?fileName=` +\n        window.encodeURIComponent(errorLocation.fileName) +\n        `&lineNumber=` +\n        window.encodeURIComponent(errorLocation.lineNumber || 1)\n    )\n  )\n}\n\nconst errorMap = {}\n\nfunction flat(arr) {\n  return Array.prototype.flat ? arr.flat() : [].concat(...arr)\n}\n\nconst handleErrorOverlay = () => {\n  const errors = Object.values(errorMap)\n  let errorStringsToDisplay = []\n  if (errors.length > 0) {\n    errorStringsToDisplay = flat(errors)\n      .map(error => {\n        if (typeof error === `string`) {\n          return error\n        } else if (typeof error === `object`) {\n          const errorStrBuilder = [error.text]\n\n          if (error.filePath) {\n            errorStrBuilder.push(`File: ${error.filePath}`)\n          }\n\n          return errorStrBuilder.join(`\\n\\n`)\n        }\n\n        return null\n      })\n      .filter(Boolean)\n  }\n\n  if (errorStringsToDisplay.length > 0) {\n    ErrorOverlay.showCompileError(errorStringsToDisplay.join(`\\n\\n`))\n  } else {\n    ErrorOverlay.clearCompileError()\n  }\n}\n\nexport const clearError = errorID => {\n  delete errorMap[errorID]\n  handleErrorOverlay()\n}\n\nexport const reportError = (errorID, error) => {\n  if (error) {\n    errorMap[errorID] = error\n  }\n  handleErrorOverlay()\n}\n\nexport { errorMap }\n"]},"metadata":{},"sourceType":"module"}