{"ast":null,"code":"import { pick } from \"@reach/router/lib/utils\";\nimport stripPrefix from \"./strip-prefix\";\nimport normalizePagePath from \"./normalize-page-path\";\nvar pathCache = new Map();\nvar matchPaths = [];\n\nvar trimPathname = function trimPathname(rawPathname) {\n  var pathname = decodeURIComponent(rawPathname);\n  var trimmedPathname = stripPrefix(pathname, __BASE_PATH__).split(\"#\")[0].split(\"?\")[0];\n  return trimmedPathname;\n};\n\nfunction absolutify(path) {\n  if (path.startsWith(\"/\") || path.startsWith(\"https://\") || path.startsWith(\"http://\")) {\n    return path;\n  }\n\n  return new URL(path, window.location.href + (window.location.href.endsWith(\"/\") ? \"\" : \"/\")).pathname;\n}\n\nexport var setMatchPaths = function setMatchPaths(value) {\n  matchPaths = value;\n};\nexport var findMatchPath = function findMatchPath(rawPathname) {\n  var trimmedPathname = cleanPath(rawPathname);\n  var pickPaths = matchPaths.map(function (_ref) {\n    var path = _ref.path,\n        matchPath = _ref.matchPath;\n    return {\n      path: matchPath,\n      originalPath: path\n    };\n  });\n  var path = pick(pickPaths, trimmedPathname);\n\n  if (path) {\n    return normalizePagePath(path.route.originalPath);\n  }\n\n  return null;\n};\nexport var grabMatchParams = function grabMatchParams(rawPathname) {\n  var trimmedPathname = cleanPath(rawPathname);\n  var pickPaths = matchPaths.map(function (_ref2) {\n    var path = _ref2.path,\n        matchPath = _ref2.matchPath;\n    return {\n      path: matchPath,\n      originalPath: path\n    };\n  });\n  var path = pick(pickPaths, trimmedPathname);\n\n  if (path) {\n    return path.params;\n  }\n\n  return {};\n};\nexport var findPath = function findPath(rawPathname) {\n  var trimmedPathname = trimPathname(absolutify(rawPathname));\n\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname);\n  }\n\n  var foundPath = findMatchPath(trimmedPathname);\n\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname);\n  }\n\n  pathCache.set(trimmedPathname, foundPath);\n  return foundPath;\n};\nexport var cleanPath = function cleanPath(rawPathname) {\n  var trimmedPathname = trimPathname(absolutify(rawPathname));\n  var foundPath = trimmedPathname;\n\n  if (foundPath === \"/index.html\") {\n    foundPath = \"/\";\n  }\n\n  foundPath = normalizePagePath(foundPath);\n  return foundPath;\n};","map":{"version":3,"sources":["/Users/aliristang/Desktop/prize-website/.cache/find-path.js"],"names":["pick","stripPrefix","normalizePagePath","pathCache","Map","matchPaths","trimPathname","rawPathname","pathname","decodeURIComponent","trimmedPathname","__BASE_PATH__","split","absolutify","path","startsWith","URL","window","location","href","endsWith","setMatchPaths","value","findMatchPath","cleanPath","pickPaths","map","matchPath","originalPath","route","grabMatchParams","params","findPath","has","get","foundPath","set"],"mappings":"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","sourcesContent":["import { pick } from \"@reach/router/lib/utils\"\nimport stripPrefix from \"./strip-prefix\"\nimport normalizePagePath from \"./normalize-page-path\"\n\nconst pathCache = new Map()\nlet matchPaths = []\n\nconst trimPathname = rawPathname => {\n  const pathname = decodeURIComponent(rawPathname)\n  // Remove the pathPrefix from the pathname.\n  const trimmedPathname = stripPrefix(pathname, __BASE_PATH__)\n    // Remove any hashfragment\n    .split(`#`)[0]\n    // Remove search query\n    .split(`?`)[0]\n\n  return trimmedPathname\n}\n\nfunction absolutify(path) {\n  // If it's already absolute, return as-is\n  if (\n    path.startsWith(`/`) ||\n    path.startsWith(`https://`) ||\n    path.startsWith(`http://`)\n  ) {\n    return path\n  }\n  // Calculate path relative to current location, adding a trailing slash to\n  // match behavior of @reach/router\n  return new URL(\n    path,\n    window.location.href + (window.location.href.endsWith(`/`) ? `` : `/`)\n  ).pathname\n}\n\n/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */\nexport const setMatchPaths = value => {\n  matchPaths = value\n}\n\n/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */\nexport const findMatchPath = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname)\n\n  const pickPaths = matchPaths.map(({ path, matchPath }) => {\n    return {\n      path: matchPath,\n      originalPath: path,\n    }\n  })\n\n  const path = pick(pickPaths, trimmedPathname)\n\n  if (path) {\n    return normalizePagePath(path.route.originalPath)\n  }\n\n  return null\n}\n\n/**\n * Return a matchpath params from reach/router rules\n * if `match-paths.json` contains `{ \":bar/*foo\" }`, and the path is /baz/zaz/zoo\n * then it returns\n *  { bar: baz, foo: zaz/zoo }\n *\n * @param {string} rawPathname A raw pathname\n * @return {object}\n */\nexport const grabMatchParams = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname)\n\n  const pickPaths = matchPaths.map(({ path, matchPath }) => {\n    return {\n      path: matchPath,\n      originalPath: path,\n    }\n  })\n\n  const path = pick(pickPaths, trimmedPathname)\n\n  if (path) {\n    return path.params\n  }\n\n  return {}\n}\n\n// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n// `/foo?bar=far` => `/page1`\nexport const findPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname)\n  }\n\n  let foundPath = findMatchPath(trimmedPathname)\n\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname)\n  }\n\n  pathCache.set(trimmedPathname, foundPath)\n\n  return foundPath\n}\n\n/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */\nexport const cleanPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n\n  let foundPath = trimmedPathname\n  if (foundPath === `/index.html`) {\n    foundPath = `/`\n  }\n\n  foundPath = normalizePagePath(foundPath)\n\n  return foundPath\n}\n"]},"metadata":{},"sourceType":"module"}