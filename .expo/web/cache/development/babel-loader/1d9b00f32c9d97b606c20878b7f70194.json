{"ast":null,"code":"import io from \"socket.io-client\";\nimport { reportError, clearError } from \"./error-overlay-handler\";\nvar socket = null;\nexport default function socketIo() {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!socket) {\n      try {\n        socket = io({\n          transports: [process.env.GATSBY_SOCKET_IO_DEFAULT_TRANSPORT]\n        });\n        socket.on(\"reconnect_attempt\", function () {\n          socket.io.opts.transports = [\"polling\", \"websocket\"];\n        });\n        socket.on(\"message\", function (msg) {\n          if (msg.type === \"overlayError\") {\n            if (msg.payload.message) {\n              reportError(msg.payload.id, msg.payload.message);\n            } else {\n              clearError(msg.payload.id);\n            }\n\n            ___emitter.emit(msg.type, msg.payload);\n          }\n        });\n        socket.on(\"disconnect\", function () {\n          console.warn(\"[socket.io] Disconnected from dev server.\");\n        });\n      } catch (err) {\n        console.error(\"Could not connect to socket.io on dev server.\");\n      }\n    }\n\n    return socket;\n  } else {\n    return null;\n  }\n}\n\nfunction registerPath(path) {\n  socket.emit(\"registerPath\", path);\n}\n\nfunction unregisterPath(path) {\n  socket.emit(\"unregisterPath\", path);\n}\n\nexport { registerPath, unregisterPath };","map":{"version":3,"sources":["/Users/aliristang/Desktop/prize-website/.cache/socketIo.js"],"names":["io","reportError","clearError","socket","socketIo","process","env","NODE_ENV","transports","GATSBY_SOCKET_IO_DEFAULT_TRANSPORT","on","opts","msg","type","payload","message","id","___emitter","emit","console","warn","err","error","registerPath","path","unregisterPath"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,yBAAxC;AACA,IAAIC,MAAM,GAAG,IAAb;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,iBAAJ,EAA2C;AACzC,QAAI,CAACJ,MAAL,EAAa;AAEX,UAAI;AAEFA,QAAAA,MAAM,GAAGH,EAAE,CAAC;AACVQ,UAAAA,UAAU,EAAE,CAACH,OAAO,CAACC,GAAR,CAAYG,kCAAb;AADF,SAAD,CAAX;AAKAN,QAAAA,MAAM,CAACO,EAAP,sBAA+B,YAAM;AACnCP,UAAAA,MAAM,CAACH,EAAP,CAAUW,IAAV,CAAeH,UAAf,GAA4B,wBAA5B;AACD,SAFD;AAIAL,QAAAA,MAAM,CAACO,EAAP,YAAqB,UAAAE,GAAG,EAAI;AAC1B,cAAIA,GAAG,CAACC,IAAJ,mBAAJ,EAAiC;AAC/B,gBAAID,GAAG,CAACE,OAAJ,CAAYC,OAAhB,EAAyB;AACvBd,cAAAA,WAAW,CAACW,GAAG,CAACE,OAAJ,CAAYE,EAAb,EAAiBJ,GAAG,CAACE,OAAJ,CAAYC,OAA7B,CAAX;AACD,aAFD,MAEO;AACLb,cAAAA,UAAU,CAACU,GAAG,CAACE,OAAJ,CAAYE,EAAb,CAAV;AACD;;AACDC,YAAAA,UAAU,CAACC,IAAX,CAAgBN,GAAG,CAACC,IAApB,EAA0BD,GAAG,CAACE,OAA9B;AACD;AACF,SATD;AAaAX,QAAAA,MAAM,CAACO,EAAP,eAAwB,YAAM;AAC5BS,UAAAA,OAAO,CAACC,IAAR;AACD,SAFD;AAGD,OA3BD,CA2BE,OAAOC,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACG,KAAR;AACD;AACF;;AACD,WAAOnB,MAAP;AACD,GAnCD,MAmCO;AACL,WAAO,IAAP;AACD;AACF;;AAKD,SAASoB,YAAT,CAAsBC,IAAtB,EAA4B;AAC1BrB,EAAAA,MAAM,CAACe,IAAP,iBAA4BM,IAA5B;AACD;;AAGD,SAASC,cAAT,CAAwBD,IAAxB,EAA8B;AAC5BrB,EAAAA,MAAM,CAACe,IAAP,mBAA8BM,IAA9B;AACD;;AAED,SAASD,YAAT,EAAuBE,cAAvB","sourcesContent":["import io from \"socket.io-client\"\nimport { reportError, clearError } from \"./error-overlay-handler\"\nlet socket = null\n\nexport default function socketIo() {\n  if (process.env.NODE_ENV !== `production`) {\n    if (!socket) {\n      // Try to initialize web socket if we didn't do it already\n      try {\n        // force websocket as transport\n        socket = io({\n          transports: [process.env.GATSBY_SOCKET_IO_DEFAULT_TRANSPORT],\n        })\n\n        // when websocket fails, we'll try polling\n        socket.on(`reconnect_attempt`, () => {\n          socket.io.opts.transports = [`polling`, `websocket`]\n        })\n\n        socket.on(`message`, msg => {\n          if (msg.type === `overlayError`) {\n            if (msg.payload.message) {\n              reportError(msg.payload.id, msg.payload.message)\n            } else {\n              clearError(msg.payload.id)\n            }\n            ___emitter.emit(msg.type, msg.payload)\n          }\n        })\n\n        // Prevents certain browsers spamming XHR 'ERR_CONNECTION_REFUSED'\n        // errors within the console, such as when exiting the develop process.\n        socket.on(`disconnect`, () => {\n          console.warn(`[socket.io] Disconnected from dev server.`)\n        })\n      } catch (err) {\n        console.error(`Could not connect to socket.io on dev server.`)\n      }\n    }\n    return socket\n  } else {\n    return null\n  }\n}\n\n// Tell websocket-manager.js the new path we're on.\n// This will help the backend prioritize queries for this\n// path.\nfunction registerPath(path) {\n  socket.emit(`registerPath`, path)\n}\n\n// Unregister the former path\nfunction unregisterPath(path) {\n  socket.emit(`unregisterPath`, path)\n}\n\nexport { registerPath, unregisterPath }\n"]},"metadata":{},"sourceType":"module"}