{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/aliristang/Desktop/prize-website/.cache/fast-refresh-overlay/components/runtime-error.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport StackTrace from \"stack-trace\";\nimport Overlay from \"./overlay\";\nimport { prettifyStack } from \"../utils\";\nimport CodeFrame from \"./code-frame\";\n\nfunction formatFilename(filename) {\n  var htmlMatch = /^https?:\\/\\/(.*)\\/(.*)/.exec(filename);\n\n  if (htmlMatch && htmlMatch[1] && htmlMatch[2]) {\n    return htmlMatch[2];\n  }\n\n  var sourceMatch = /^webpack-internal:\\/\\/\\/(.*)$/.exec(filename);\n\n  if (sourceMatch && sourceMatch[1]) {\n    return sourceMatch[1];\n  }\n\n  return filename;\n}\n\nvar useFetch = function useFetch(url) {\n  var _React$useState = React.useState({\n    decoded: null,\n    sourcePosition: {\n      line: null,\n      number: null\n    },\n    sourceContent: null\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      response = _React$useState2[0],\n      setResponse = _React$useState2[1];\n\n  React.useEffect(function () {\n    function fetchData() {\n      var res, json, decoded, sourcePosition, sourceContent;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 5:\n              json = _context.sent;\n              decoded = prettifyStack(json.codeFrame);\n              sourcePosition = json.sourcePosition, sourceContent = json.sourceContent;\n              setResponse({\n                decoded: decoded,\n                sourceContent: sourceContent,\n                sourcePosition: sourcePosition\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, []);\n  return response;\n};\n\nfunction getCodeFrameInformation(stackTrace) {\n  var callSite = stackTrace.find(function (CallSite) {\n    return CallSite.getFileName();\n  });\n\n  if (!callSite) {\n    return null;\n  }\n\n  var moduleId = formatFilename(callSite.getFileName());\n  var lineNumber = callSite.getLineNumber();\n  var columnNumber = callSite.getColumnNumber();\n  var functionName = callSite.getFunctionName();\n  return {\n    moduleId: moduleId,\n    lineNumber: lineNumber,\n    columnNumber: columnNumber,\n    functionName: functionName\n  };\n}\n\nvar RuntimeError = function RuntimeError(_ref) {\n  var error = _ref.error,\n      open = _ref.open,\n      dismiss = _ref.dismiss;\n  var stacktrace = StackTrace.parse(error.error);\n\n  var _getCodeFrameInformat = getCodeFrameInformation(stacktrace),\n      moduleId = _getCodeFrameInformat.moduleId,\n      lineNumber = _getCodeFrameInformat.lineNumber,\n      columnNumber = _getCodeFrameInformat.columnNumber,\n      functionName = _getCodeFrameInformat.functionName;\n\n  var res = useFetch(\"/__original-stack-frame?moduleId=\" + window.encodeURIComponent(moduleId) + \"&lineNumber=\" + window.encodeURIComponent(lineNumber) + \"&columnNumber=\" + window.encodeURIComponent(columnNumber));\n  var header = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    \"data-gatsby-overlay\": \"header__cause-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Unhandled Runtime Error\"), React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, moduleId)), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return open(moduleId, res.sourcePosition.line);\n    },\n    \"data-gatsby-overlay\": \"header__open-in-editor\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Open in editor\"));\n  var body = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    \"data-gatsby-overlay\": \"body__error-message-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Error in function \", React.createElement(\"span\", {\n    \"data-font-weight\": \"bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 27\n    }\n  }, functionName)), React.createElement(\"p\", {\n    \"data-gatsby-overlay\": \"body__error-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, error.error.message), React.createElement(CodeFrame, {\n    decoded: res.decoded,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n  return React.createElement(Overlay, {\n    header: header,\n    body: body,\n    dismiss: dismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default RuntimeError;","map":{"version":3,"sources":["/Users/aliristang/Desktop/prize-website/.cache/fast-refresh-overlay/components/runtime-error.js"],"names":["React","StackTrace","Overlay","prettifyStack","CodeFrame","formatFilename","filename","htmlMatch","exec","sourceMatch","useFetch","url","useState","decoded","sourcePosition","line","number","sourceContent","response","setResponse","useEffect","fetchData","fetch","res","json","codeFrame","getCodeFrameInformation","stackTrace","callSite","find","CallSite","getFileName","moduleId","lineNumber","getLineNumber","columnNumber","getColumnNumber","functionName","getFunctionName","RuntimeError","error","open","dismiss","stacktrace","parse","window","encodeURIComponent","header","body","message"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport StackTrace from \"stack-trace\"\nimport Overlay from \"./overlay\"\nimport { prettifyStack } from \"../utils\"\nimport CodeFrame from \"./code-frame\"\n\nfunction formatFilename(filename) {\n  const htmlMatch = /^https?:\\/\\/(.*)\\/(.*)/.exec(filename)\n  if (htmlMatch && htmlMatch[1] && htmlMatch[2]) {\n    return htmlMatch[2]\n  }\n\n  const sourceMatch = /^webpack-internal:\\/\\/\\/(.*)$/.exec(filename)\n  if (sourceMatch && sourceMatch[1]) {\n    return sourceMatch[1]\n  }\n\n  return filename\n}\n\nconst useFetch = url => {\n  const [response, setResponse] = React.useState({\n    decoded: null,\n    sourcePosition: {\n      line: null,\n      number: null,\n    },\n    sourceContent: null,\n  })\n  React.useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(url)\n      const json = await res.json()\n      const decoded = prettifyStack(json.codeFrame)\n      const { sourcePosition, sourceContent } = json\n      setResponse({\n        decoded,\n        sourceContent,\n        sourcePosition,\n      })\n    }\n    fetchData()\n  }, [])\n  return response\n}\n\nfunction getCodeFrameInformation(stackTrace) {\n  const callSite = stackTrace.find(CallSite => CallSite.getFileName())\n  if (!callSite) {\n    return null\n  }\n\n  const moduleId = formatFilename(callSite.getFileName())\n  const lineNumber = callSite.getLineNumber()\n  const columnNumber = callSite.getColumnNumber()\n  const functionName = callSite.getFunctionName()\n\n  return {\n    moduleId,\n    lineNumber,\n    columnNumber,\n    functionName,\n  }\n}\n\nconst RuntimeError = ({ error, open, dismiss }) => {\n  const stacktrace = StackTrace.parse(error.error)\n  const {\n    moduleId,\n    lineNumber,\n    columnNumber,\n    functionName,\n  } = getCodeFrameInformation(stacktrace)\n\n  const res = useFetch(\n    `/__original-stack-frame?moduleId=` +\n      window.encodeURIComponent(moduleId) +\n      `&lineNumber=` +\n      window.encodeURIComponent(lineNumber) +\n      `&columnNumber=` +\n      window.encodeURIComponent(columnNumber)\n  )\n\n  const header = (\n    <>\n      <div data-gatsby-overlay=\"header__cause-file\">\n        <p>Unhandled Runtime Error</p>\n        <span>{moduleId}</span>\n      </div>\n      <button\n        onClick={() => open(moduleId, res.sourcePosition.line)}\n        data-gatsby-overlay=\"header__open-in-editor\"\n      >\n        Open in editor\n      </button>\n    </>\n  )\n  const body = (\n    <>\n      <p data-gatsby-overlay=\"body__error-message-header\">\n        Error in function <span data-font-weight=\"bold\">{functionName}</span>\n      </p>\n      <p data-gatsby-overlay=\"body__error-message\">{error.error.message}</p>\n      <CodeFrame decoded={res.decoded} />\n    </>\n  )\n\n  return <Overlay header={header} body={body} dismiss={dismiss} />\n}\n\nexport default RuntimeError\n"]},"metadata":{},"sourceType":"module"}